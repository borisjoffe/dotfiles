source "$HOME/.env"
[ -f ~/.apikeys ] && source ~/.apikeys

alias solarized-switch='source $HOME/bin/solarized-switch.sh'
source $HOME/bin/solarized-switch.sh $SOLARIZED


# Encryption / Decryption Functions
encrypt () {
	gpg -ac --no-options "$1"
}

crypt () {
	gpg --no-options "$1"
}


# cd and ls
cdl() {
	cd $1;
	shift;
	ls $@
}

# mkdir and cd
mdcd () {
	mkdir $1;
	cd $1;
}

# A shortcut function that simplifies usage of xclip.
# - Accepts input from either stdin (pipe), or params.
# From: http://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/
# ------------------------------------------------
cb() {
  local _scs_col="\e[0;32m"; local _wrn_col='\e[1;31m'; local _trn_col='\e[0;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}
# Aliases / functions leveraging the cb() function
# ------------------------------------------------
# Copy contents of a file
function cbf() { cat "$1" | cb; }
# Copy current working directory
alias cbwd="pwd | cb"
# Copy most recent command in bash history
alias cbhs="cat $HISTFILE | tail -n 1 | cb"


export LESS=-R

# turn off bold/blink/standout
export LESS_TERMCAP_me=$(printf '\e[0m')
# stop standout
export LESS_TERMCAP_se=$(printf '\e[0m')
# stop underline
export LESS_TERMCAP_ue=$(printf '\e[0m')
# blink
export LESS_TERMCAP_mb=$(printf '\e[1;32m')
# bold
#export LESS_TERMCAP_md=$(printf '\e[1;34m')
export LESS_TERMCAP_md=$(printf '\e[1;36m')
# underline
#export LESS_TERMCAP_us=$(printf '\e[1;32m')
# standout
export LESS_TERMCAP_so=$(printf '\e[1;44;1m')


#eval $(ssh-agent)
#ssh-add ~/.ssh/id_rsa
#ssh-add ~/.ssh/*
#source $HOME/run-gpg

#eval $(keychain --eval --agents ssh -Q --quiet ~/.ssh/id_rsa)

disp () {
	export DISPLAY=:$1
}

eval "$(fasd --init auto)"

# NVM_DIR var in .env
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# OPAM configuration
if [ $ZSH_NAME ]; then
	. $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true
else
	. $HOME/.opam/opam-init/init.sh > /dev/null 2> /dev/null || true
fi
